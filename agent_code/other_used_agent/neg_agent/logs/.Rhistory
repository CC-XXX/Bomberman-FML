with(as.list(c(state, parameters)), {
dS <-  -β*S*I/N
dI <-  β*S*I/N-γ*I
list(c(dS, dI))
})
}
parameters <- c(β = 2, γ = 1/7, N = 701)
state      <- c(S = 700, I = 1)
times      <- seq(0, 50, by = 1)
out <- ode(y = state, times = times, func = Lorenz, parms = parameters)
plot(x = 1:50,y = out$I)
Lorenz.1 <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS <-  -β*S*I/N
dE <- β*S*I/N-σ*E
dI <-  σ*E-γ*I
list(c(dS,dE, dI))
})
}
parameters.1 <- c(β = 2, γ = 1/7, σ = 1/5,N = 701)
state.1      <- c(S = 700,E = 1, I = 1)
times.1      <- seq(0, 50, by = 1)
out.1 <- ode(y = state.1, times = times.1, func = Lorenz.1, parms = parameters.1)
plot(x = 1:50,y = out.1$I)
out$I
out
out[,2]
out[,3]
Lorenz <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS <-  -β*S*I/N
dI <-  β*S*I/N-γ*I
list(c(dS, dI))
})
}
parameters <- c(β = 2, γ = 1/7, N = 701)
state      <- c(S = 700, I = 1)
times      <- seq(0, 50, by = 1)
out <- ode(y = state, times = times, func = Lorenz, parms = parameters)
plot(x = 1:50,y = out[,3])
Lorenz.1 <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS <-  -β*S*I/N
dE <- β*S*I/N-σ*E
dI <-  σ*E-γ*I
list(c(dS,dE, dI))
})
}
parameters.1 <- c(β = 2, γ = 1/7, σ = 1/5,N = 701)
state.1      <- c(S = 700,E = 1, I = 1)
times.1      <- seq(0, 50, by = 1)
out.1 <- ode(y = state.1, times = times.1, func = Lorenz.1, parms = parameters.1)
plot(x = 1:50,y = out.1[,3])
Lorenz <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS <-  -β*S*I/N
dI <-  β*S*I/N-γ*I
list(c(dS, dI))
})
}
parameters <- c(β = 2, γ = 1/7, N = 701)
state      <- c(S = 700, I = 1)
times      <- seq(0, 50, by = 1)
out <- ode(y = state, times = times, func = Lorenz, parms = parameters)
plot(x = 1:51,y = out[,3])
Lorenz.1 <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS <-  -β*S*I/N
dE <- β*S*I/N-σ*E
dI <-  σ*E-γ*I
list(c(dS,dE, dI))
})
}
parameters.1 <- c(β = 2, γ = 1/7, σ = 1/5,N = 701)
state.1      <- c(S = 700,E = 1, I = 1)
times.1      <- seq(0, 50, by = 1)
out.1 <- ode(y = state.1, times = times.1, func = Lorenz.1, parms = parameters.1)
plot(x = 1:51,y = out.1[,3])
Lorenz <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS <-  -β*S*I/N
dI <-  β*S*I/N-γ*I
list(c(dS, dI))
})
}
parameters <- c(β = 2, γ = 1/7, N = 701)
state      <- c(S = 700, I = 1)
times      <- seq(0, 50, by = 1)
out <- ode(y = state, times = times, func = Lorenz, parms = parameters)
plot(x = 1:51,y = out[,3],ty = "l",lwd = 2,col = "red")
Lorenz.1 <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS <-  -β*S*I/N
dE <- β*S*I/N-σ*E
dI <-  σ*E-γ*I
list(c(dS,dE, dI))
})
}
parameters.1 <- c(β = 2, γ = 1/7, σ = 1/5,N = 701)
state.1      <- c(S = 700,E = 1, I = 1)
times.1      <- seq(0, 50, by = 1)
out.1 <- ode(y = state.1, times = times.1, func = Lorenz.1, parms = parameters.1)
lines(x = 1:51,y = out.1[,3],lwd= 2,col = "blue")
？pbinom
?pbinom
0.4*0.64*0.8
dbinom(2,5,0.2)
dbinom(200,3160,0.05)
pbinom(200,3160,0.05)
pbinom(158,3160,0.05)
pbinom(159,3160,0.05)
pbinom(160,3160,0.05)
dbinom(5,79,0.05)
ln(80)
?log
log(exp(2), base = exp(1))
log(10, base = exp(1))
log(80, base = exp(1))
library(sand)
data(karate)
hist(degree(karate),xlim = c(0,50),xlab = "Vertex Degree",ylab = "Frequency",main = "")
m<-gsize(karate)#获取边数
n<-vcount(karate)#获取顶点数
deg <- degree(karate);deg <- as.numeric(deg)
fre <- table(deg)
fre <- as.data.frame(fre)
deg <- deg[!duplicated(deg)]
deg <- deg[order(deg)]
fre <- cbind(fre,deg)
cumu <- matrix(c(0:(max(fre[3])+1),rep(0,max(fre[,3]+2)),rep(0,max(fre[,3]+2))),ncol =3)
for (i in 1:length(fre[,2])) {
cumu[which(fre[i,3] == cumu[,1]),2] = fre[i,2]
}
cumu[,2] <- cumsum(cumu[,2])
for(i in 2:length(cumu[,1])){
cumu[i,3] <- 34-cumu[i-1,2]
cumu[1,3] <- 34
}
cumu[,3] <- cumu[,3]/34
a <- length(cumu[,1])
for(i in 1:(a-1)){
if(cumu[i,3] != cumu[i+1,3])
{
cumu = rbind(cumu,c(cumu[i,1],0,cumu[i+1,3]))
}
}
cumu <- cumu[order(cumu[,1]),]
cumu
View(cumu)
library(sand)
data(karate)
hist(degree(karate),xlim = c(0,50),xlab = "Vertex Degree",ylab = "Frequency",main = "")
m<-gsize(karate)#获取边数
n<-vcount(karate)#获取顶点数
deg <- degree(karate);deg <- as.numeric(deg)
fre <- table(deg)
fre <- as.data.frame(fre)
deg <- deg[!duplicated(deg)]
deg <- deg[order(deg)]
fre <- cbind(fre,deg)
cumu <- matrix(c(0:(max(fre[3])+1),rep(0,max(fre[,3]+2)),rep(0,max(fre[,3]+2))),ncol =3)
for (i in 1:length(fre[,2])) {
cumu[which(fre[i,3] == cumu[,1]),2] = fre[i,2]
}
cumu[,2] <- cumsum(cumu[,2])
for(i in 2:length(cumu[,1])){
cumu[i,3] <- 34-cumu[i-1,2]
cumu[1,3] <- 34
}
cumu[,3] <- cumu[,3]/34
View(cumu)
colnames(cumu) <- c("度","数量","以下所剩比例")
View(cumu)
c("a",23)
a <- as.data.frame(c(4,3,2,1,"a","b","c","d"))
a
a <- as.data.frame(c(4,3,2,1,"a","b","c","d"),ncol =2)
a
a <- as.data.frame(matrix(c(4,3,2,1,"a","b","c","d"),ncol =2))
a
sort(a)
sort(a[1])
sort(a[,1])
order(a[,1])
a <- as.data.frame(matrix(c(4,3,2,1,"a","b","c","d"),ncol =2))
b <- a[order(a),]
a[order(a),]
a[order(a[,1]),]
a <- as.data.frame(matrix(c(4,3,2,1,"a","b","c","d"),ncol =2))
b <- a[order(a[,1]),]
b
a <- as.data.frame(matrix(c(4,3,3,1,"a","b","c","d"),ncol =2))
b <- a[order(a[,1]),]
View(a)
View(b)
a=c(1:9)
(a+1)^2
exp(-a)
exp(a/10)
exp(-a/10)
exp(-a/10)*(a+1)^2
log(4)
-2/(log(0.5))
log4
log(4)
ln(4)
for i in 1:2{}
for i in 1:2{}
for i in 1:2{
？for
1/c(1,2,3,4)
sum(1/c(1,2,3,4))
y1 <- function(x){
for(i in 1:x){
y = sum(1/(1:x)
}
return(y)
}
y1 <- function(x){
for(i in 1:x){
y = sum(1/(1:x)
}
return(y)
}
y1 <- function(x){
for(i in 1:x){
y = sum(1/(1:x)
}
return(y)
}
y1 <- function(x){
}
y1 <- function(x){
y = sum(1/(1:)
return(y)
}
return(y)
return(y1)
y = sum(1/(1:10)
y1 <- function(x){
y = sum(1/(1:x))
return(y1)
}
y = sum(1/(1:x))
y1 <- function(x){
y = sum(1/(1:x))
}
y1(2)
y1 <- function(x){
y = sum(1/(1:x))
return(y)
}
y1(2)
y1 <- function(x){
y = sum(1/(1:x))
return(y)
}
y2 <- function(x){
y=log(x)+1
}
plot(x = 1:100,y = y1(x),lty = "l")
plot(x = 100,y = y1(x),lty = "l")
plot(x = 100,y = y1(100),lty = "l")
plot(x = 1:100,y = y1(1:100),lty = "l")
y1(1:2)
y1(1)
y1(2)
log(2)
y2(2)
y1 <- function(x){
y = sum(1/(1:x))
return(y)
}
y2 <- function(x){
y=log(x)+1
return(y)
}
y2(1)
y2(2)
y2(1:2)
y1 <- function(x){
for (i in 1:x) {
i += i
}
return(i)
}
y1 <- function(x){
for (i in 1:x) {
i=i+i
}
return(i)
}
y1(1)
y1(2)
for (i in 2) {
y = y+1
}
for (i in 2) {
i = i+1
}
for (i in 2) {
i = i+1
}
for (i in 2) {
i = i+1;return(i)
}
a = 1
for (i in 2) {
a = i+1
}
a = c(1,2)
for (i in 2) {
a[i] = i+1
}
y1 <- function(x){
y = sum(1/(1:x))
return(y)
}
y2 <- function(x){
y=log(x)+1
return()
}
y1(1)
y1(2)
y1(3)
Y1 = rep(0,100)
for (i in 1:100) {
Y1[i]=y1(i)
}
plot(x=1:100,y = y2(1:100),lty = "l")
y2(1:3)
y2 <- function(x){
y=log(x)+1
return(y)
}
y2(1:3)
plot(x=1:100,y = y2(1:100),lty = "l")
y2(1:100)
y1 <- function(x){
y = sum(1/(1:x))
return(y)
}
y2 <- function(x){
y=log(x)+1
return(y)
}
plot(x=1:100,y = y2(1:100),lty = "l")
Y2 = cbind((1:100),y2(1:100))
View(Y2)
plot(x = Y2[1],y = Y2[2],lty = "l")
Y2[1]
Y2[1,]
Y2[,1]
plot(x = Y2[,1],y = Y2[,2],lty = "l")
plot(x = 1;100,y = 1:100,lty = "l")
plot(x = 1:100,y = 1:100,lty = "l")
plot(x = 1:100,y = 1:100)
plot(x = 1:100,y = 1:100,ty = "l")
plot(x = Y2[,1],y = Y2[,2],ty = "l")
y1 <- function(x){
y = sum(1/(1:x))
return(y)
}
y2 <- function(x){
y=log(x)+1
return(y)
}
y1(1:2)
y1 <- function(x){
y = sum(1/(1:x))
return(y)
}
y2 <- function(x){
y=log(x)+1
return(y)
}
Y1=rep(0,100)
for (i in 1:100) {
Y1[i] = y1(i)
}
plot(x =1:100,y = Y1,ty = "l",col = "red")
lines(x = 1:100,y = y2(1:100),col = "blue")
y1 <- function(x){
y = sum(1/(1:x))
return(y)
}
y2 <- function(x){
y=log(x)+1
return(y)
}
Y1=rep(0,100)
for (i in 1:100) {
Y1[i] = y1(i)
}
plot(x =log(1:100),y = log(Y1),ty = "l",col = "red")
lines(x = log(1:100),y = log(y2(1:100)),col = "blue")
y1 <- function(x){
y=3/4*exp(3/2*(1-x))
return(y)
}
y2 <- function(x){
y=3/8*exp(3/4*(1-x))
return(y)
}
y2(1)
y2(2)
y1(2)
plot(x =log(1:100),y = log(y1(1:100)),ty = "l",col = "red")
lines(x = log(1:100),y = log(y2(1:100)),col = "blue")
plot(x =log(1:100),y = log(y1(1:100)+y2(1:100)),ty = "l",col = "red")
plot(x =(1:100),y = (y1(1:100)+y2(1:100)),ty = "l",col = "red")
plot(x =(1:100),y = (y1(1:100)),ty = "l",col = "red")
lines(x = (1:100),y = (y2(1:100)),col = "blue")
e11=0
e12=0
e13=1/4
e22=1/4
e23=1/2
e33=0
q1=1/8
q2=1/2
q3=3/8
1*1*(e11-q1*q1)+1*2*(e12-q1*q2)+1*3*(e13-q1*q3)+2*2*(e22-q2*q2)+
2*3*(e23-q2*q3)+3*3*(e33-q3*q3)
(1*1*(e11-q1*q1)+1*2*(e12-q1*q2)+1*3*(e13-q1*q3)+2*2*(e22-q2*q2)+
2*3*(e23-q2*q3)+3*3*(e33-q3*q3))/(7/16)
(1*1*(e11-q1*q1)+2*1*2*(e12-q1*q2)+2*1*3*(e13-q1*q3)+2*2*(e22-q2*q2)+
2*2*3*(e23-q2*q3)+3*3*(e33-q3*q3))/(7/16)
1*q1+2^2*q2+3^2*q3-(1*q1+2*q2+3*q3)^2
7/16
e11=0
e12=0
e13=1/6
e22=1/6
e23=2/6
e33=0
q1=1/8
q2=1/2
q3=3/8
(1*1*(e11-q1*q1)+1*2*(e12-q1*q2)+1*3*(e13-q1*q3)+2*2*(e22-q2*q2)+
2*3*(e23-q2*q3)+3*3*(e33-q3*q3))/(7/16)
e11=0
e12=0
e13=1/6
e22=1/6
e23=2/6
e33=0
q1=1/8
q2=1/2
q3=3/8
(1*1*(e11-q1*q1)+2*1*2*(e12-q1*q2)+2*1*3*(e13-q1*q3)+2*2*(e22-q2*q2)+
2*2*3*(e23-q2*q3)+3*3*(e33-q3*q3))/(7/16)
e11=0
e12=0
e13=1/7
e22=1/7
e23=2/7
e33=0
q1=1/8
q2=1/2
q3=3/8
(1*1*(e11-q1*q1)+2*1*2*(e12-q1*q2)+2*1*3*(e13-q1*q3)+2*2*(e22-q2*q2)+
2*2*3*(e23-q2*q3)+3*3*(e33-q3*q3))/(7/16)
e11=0
e12=0
e13=1/7
e22=1/7
e23=2/7
e33=0
q1=1/8
q2=1/2
q3=3/8
(1*1*(e11-q1*q1)+2*1*2*(e12-q1*q2)+2*1*3*(e13-q1*q3)+2*2*(e22-q2*q2)+
2*2*3*(e23-q2*q3)+3*3*(e33-q3*q3))/(7/16)
a <- c(1,2,3)
a[c(1,2,1,3)]
x <- c(first = 1, second = 2, third = 3)
x[c("first")]
x[c("first","third")]
1:10 - 1:3
sort(c(3, 1, 4, 1, 5, 9, 2, 6))
sort(c(3, 1, 4, 1, 5, 9, 2, 6))
order(c(3, '.', 1, 4, 1, 5))
cut(1:4, 1:3)
a =cut(1:4, 1:3)
mean(as.numeric(factor(c(20,30,30,30,20))))
order(matrix(1:9, 3)[, 2])
1/0.0036
2533*0.0036
a = c(1,2,3,4,5)
b = c(1,2)
which(a== b)
for(i in a):
for (i in a) {
j = i
}
a = c(1,2,2,3,3,4,5)
b = c(1,3)
a == b
a == b
a[a == b]
a in b
match(a,b)
match.arg(a,b)
a[match(a,b)]
a %in% b
a[a %in% b]
setwd("C:/Users/Administrator/Desktop/聪聪作业/机器学习/炸弹人/论文范例+最终结果/0bomberman_rl2/0bomberman_rl/agent_code/final_agent/logs")
setwd("C:/Users/Administrator/Desktop/聪聪作业/机器学习/炸弹人/论文范例+最终结果/0bomberman_rl/0bomberman_rl/agent_code/final_agent/logs")
read.table("final_agent.txt",sep,header)
read.table("final_agent.log",sep,header)
read.table("final_agent.log")
